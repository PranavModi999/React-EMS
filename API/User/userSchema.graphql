scalar GraphQLDate

type Query {
  #fetch all employees based on employeeType filter, pass no filter to fetch all employees
  getAllEmployees(filter: String): [Employee]
  #fetch single employee with matching emp id
  getEmployeeById(id: String): Employee

  getRetirementData:[Employee]
}

type Mutation {
  #update single employee with matching emp id
  updateEmployeeById(emp: EmployeeInput!): Employee
  #create new employee based on emp passed as query parameter
  createNewEmployee(emp: EmployeeInput!): Employee
  #delete a single employee based on emp id
  deleteEmployeeById(id: String!): DeleteEmployeeResponse
}

type DeleteEmployeeResponse {
  success: Boolean
  message: String
}
#defining employee object
type Employee {
  id: ID
  FirstName: String!
  LastName: String!
  Age: Int!
  DateOfJoining: GraphQLDate!
  DOB: GraphQLDate!
  Title: String!
  Department: String!
  EmployeeType: String!
  CurrentStatus: String!
}
#defining employee input
input EmployeeInput {
  id: ID
  FirstName: String!
  LastName: String!
  Age: Int!
  DateOfJoining: GraphQLDate!
   DOB: GraphQLDate!
  Title: String!
  Department: String!
  EmployeeType: String!
  CurrentStatus: String!
}

type EmployeeDetails{
  id: ID
  FirstName: String!
  LastName: String!
  Age: Int!
  DateOfJoining: GraphQLDate!
   DOB: GraphQLDate!
  Title: String!
  Department: String!
  EmployeeType: String!
  CurrentStatus: String!
}